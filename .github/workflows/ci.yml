name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      env:
        CARDGEN_SECRET: "ci-test-secret-key-for-deterministic-cvcs"
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Check coverage threshold
      run: |
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total coverage: ${coverage}%"
        threshold=50
        if (( $(echo "$coverage < $threshold" | bc -l) )); then
          echo "⚠️  Coverage is below ${threshold}% (current: ${coverage}%)"
          echo "This is acceptable for v1.0.0 but should be improved"
        else
          echo "✓ Coverage is above ${threshold}%"
        fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      continue-on-error: true
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build
      run: go build -v ./cmd/cardgen-pro

    - name: Test CLI
      env:
        CARDGEN_SECRET: "build-test-secret"
      run: |
        ./cardgen-pro version
        ./cardgen-pro generate --count 5 --brand visa --out /tmp/test-cards.json
        ./cardgen-pro validate 4000000000000002

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      if: vars.DOCKER_ENABLED == 'true'
      with:
        context: .
        push: false
        tags: cardgen-pro:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      if: vars.DOCKER_ENABLED == 'true'
      run: |
        docker run --rm cardgen-pro:test version
        docker run --rm -e CARDGEN_SECRET=test cardgen-pro:test generate --count 3
